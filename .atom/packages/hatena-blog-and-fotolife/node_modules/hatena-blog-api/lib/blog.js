var Blog, Promise, fs, oauth, request, wsse, xml2js;

Promise = require('q').Promise;

fs = require('fs');

oauth = require('oauth');

request = require('request');

wsse = require('wsse');

xml2js = require('xml2js');

Blog = (function() {
  function Blog(_arg) {
    var accessToken, accessTokenSecret, accesstoken, accesstokensecret, apiKey, apikey, blogId, blogid, consumerKey, consumerSecret, consumerkey, consumersecret, type, userName, username;
    type = _arg.type, username = _arg.username, userName = _arg.userName, blogid = _arg.blogid, blogId = _arg.blogId, apikey = _arg.apikey, apiKey = _arg.apiKey, consumerkey = _arg.consumerkey, consumerKey = _arg.consumerKey, consumersecret = _arg.consumersecret, consumerSecret = _arg.consumerSecret, accesstoken = _arg.accesstoken, accessToken = _arg.accessToken, accesstokensecret = _arg.accesstokensecret, accessTokenSecret = _arg.accessTokenSecret;
    this._type = type != null ? type : 'wsse';
    this._username = userName != null ? userName : username;
    this._blogId = blogId != null ? blogId : blogid;
    this._apiKey = apiKey != null ? apiKey : apikey;
    this._consumerKey = consumerKey != null ? consumerKey : consumerkey;
    this._consumerSecret = consumerSecret != null ? consumerSecret : consumersecret;
    this._accessToken = accessToken != null ? accessToken : accesstoken;
    this._accessTokenSecret = accessTokenSecret != null ? accessTokenSecret : accesstokensecret;
    this._baseUrl = 'https://blog.hatena.ne.jp';
  }

  Blog.prototype.create = function(_arg, callback) {
    var body, categories, content, draft, method, path, statusCode, title, updated;
    title = _arg.title, content = _arg.content, updated = _arg.updated, categories = _arg.categories, draft = _arg.draft;
    title = title != null ? title : '';
    content = content != null ? content : '';
    method = 'post';
    path = "/" + this._username + "/" + this._blogId + "/atom/entry";
    body = {
      entry: {
        $: {
          xmlns: 'http://www.w3.org/2005/Atom',
          'xmlns:app': 'http://www.w3.org/2007/app'
        },
        title: {
          _: title
        },
        content: {
          $: {
            type: 'text/plain'
          },
          _: content
        }
      }
    };
    if (updated != null) {
      body.entry.updated = {
        _: updated
      };
    }
    if (categories != null) {
      body.entry.category = categories.map(function(c) {
        return {
          $: {
            term: c
          }
        };
      });
    }
    if (draft != null ? draft : false) {
      body.entry['app:control'] = {
        'app:draft': {
          _: 'yes'
        }
      };
    }
    statusCode = 201;
    return this._request({
      method: method,
      path: path,
      body: body,
      statusCode: statusCode
    }, callback);
  };

  Blog.prototype.update = function(_arg, callback) {
    var body, categories, content, draft, id, method, path, statusCode, title, updated;
    id = _arg.id, title = _arg.title, content = _arg.content, updated = _arg.updated, categories = _arg.categories, draft = _arg.draft;
    if (id == null) {
      return this._reject('options.id is required', callback);
    }
    if (content == null) {
      return this._reject('options.content is required', callback);
    }
    method = 'put';
    path = "/" + this._username + "/" + this._blogId + "/atom/entry/" + id;
    body = {
      entry: {
        $: {
          xmlns: 'http://www.w3.org/2005/Atom',
          'xmlns:app': 'http://www.w3.org/2007/app'
        },
        content: {
          $: {
            type: 'text/plain'
          },
          _: content
        }
      }
    };
    if (title != null) {
      body.entry.title = {
        _: title
      };
    }
    if (updated != null) {
      body.entry.updated = {
        _: updated
      };
    }
    if (categories != null) {
      body.entry.category = categories.map(function(c) {
        return {
          $: {
            term: c
          }
        };
      });
    }
    if (draft != null ? draft : false) {
      body.entry['app:control'] = {
        'app:draft': {
          _: 'yes'
        }
      };
    }
    statusCode = 200;
    return this._request({
      method: method,
      path: path,
      body: body,
      statusCode: statusCode
    }, callback);
  };

  Blog.prototype.destroy = function(_arg, callback) {
    var id, method, path, statusCode;
    id = _arg.id;
    if (id == null) {
      return this._reject('options.id is required', callback);
    }
    method = 'delete';
    path = "/" + this._username + "/" + this._blogId + "/atom/entry/" + id;
    statusCode = 200;
    return this._request({
      method: method,
      path: path,
      statusCode: statusCode
    }, callback);
  };

  Blog.prototype.show = function(_arg, callback) {
    var id, method, path, statusCode;
    id = _arg.id;
    if (id == null) {
      return this._reject('options.id is required', callback);
    }
    method = 'get';
    path = "/" + this._username + "/" + this._blogId + "/atom/entry/" + id;
    statusCode = 200;
    return this._request({
      method: method,
      path: path,
      statusCode: statusCode
    }, callback);
  };

  Blog.prototype.index = function(options, callback) {
    var method, path, statusCode;
    if (callback == null) {
      callback = options;
    }
    method = 'get';
    path = "/" + this._username + "/" + this._blogId + "/atom/entry";
    statusCode = 200;
    return this._request({
      method: method,
      path: path,
      statusCode: statusCode
    }, callback);
  };

  Blog.prototype._reject = function(message, callback) {
    var e;
    try {
      e = new Error(message);
      if (callback != null) {
        callback(e);
      }
      return Promise.reject(e);
    } catch (_error) {
      return Promise.reject(e);
    }
  };

  Blog.prototype._request = function(_arg, callback) {
    var body, method, params, path, promise, statusCode, token;
    method = _arg.method, path = _arg.path, body = _arg.body, statusCode = _arg.statusCode;
    callback = callback != null ? callback : (function() {});
    params = {};
    params.method = method;
    params.url = this._baseUrl + path;
    if (this._type === 'oauth') {
      params.oauth = {
        consumer_key: this._consumerKey,
        consumer_secret: this._consumerSecret,
        token: this._accessToken,
        token_secret: this._accessTokenSecret
      };
    } else {
      token = wsse().getUsernameToken(this._username, this._apiKey, {
        nonceBase64: true
      });
      params.headers = {
        'Authorization': 'WSSE profile="UsernameToken"',
        'X-WSSE': 'UsernameToken ' + token
      };
    }
    promise = body != null ? this._toXml(body) : Promise.resolve(null);
    return promise.then((function(_this) {
      return function(body) {
        if (body != null) {
          params.body = body;
        }
        return _this._requestPromise(params);
      };
    })(this)).then((function(_this) {
      return function(res) {
        if (res.statusCode !== statusCode) {
          throw new Error("HTTP status code is " + res.statusCode);
        }
        return _this._toJson(res.body);
      };
    })(this)).then(function(json) {
      callback(null, json);
      return json;
    }).then(null, function(err) {
      callback(err);
      throw err;
    });
  };

  Blog.prototype._requestPromise = function(params) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        return _this._rawRequest(params, function(err, res) {
          if (err != null) {
            return reject(err);
          } else {
            return resolve(res);
          }
        });
      };
    })(this));
  };

  Blog.prototype._toJson = function(xml) {
    return new Promise(function(resolve, reject) {
      var parser;
      parser = new xml2js.Parser({
        explicitArray: false,
        explicitCharkey: true
      });
      return parser.parseString(xml, function(err, result) {
        if (err != null) {
          return reject(err);
        } else {
          return resolve(result);
        }
      });
    });
  };

  Blog.prototype._toXml = function(json) {
    var builder, e, xml;
    builder = new xml2js.Builder();
    try {
      xml = builder.buildObject(json);
      return Promise.resolve(xml);
    } catch (_error) {
      e = _error;
      return Promise.reject(e);
    }
  };

  Blog.prototype._rawRequest = request;

  return Blog;

})();

module.exports = Blog;
